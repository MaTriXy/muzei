/*
 * Copyright 2014 Google Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package com.google.android.apps.muzei.api

import com.google.android.apps.muzei.api.provider.MuzeiArtProvider

/**
 * Data class representing a user-visible command.
 *
 * @see MuzeiArtProvider.getCommands
 */
@Deprecated("The UserCommand class have been replaced with RemoteActionCompat, see " +
        "getCommandActions().")
public data class UserCommand(
        /**
         * The unique ID for this user command
         */
        val id: Int,
        /**
         * The user-visible title text, or null if none is provided. When none is provided,
         * a default will be used if available
         */
        val title: String? = null
) {
    /**
     * Returns a serialized version of this user command.
     *
     * @return a serialized representation of this user command
     *
     * @see deserialize
     */
    @Suppress("DeprecatedCallableAddReplaceWith")
    @Deprecated("UserCommands should not be serialized and deserialized")
    public fun serialize(): String {
        return id.toString() + if (title.isNullOrEmpty()) "" else ":$title"
    }

    public companion object {
        /**
         * Deserializes a user command from the given string.
         *
         * @param serialized the string generated by [serialize] to deserialize.
         *
         * @return the deserialized [UserCommand] from the given string.
         */
        @Suppress("DEPRECATION")
        @Deprecated("UserCommands should not be serialized and deserialized")
        @JvmStatic
        public fun deserialize(serialized: String): UserCommand {
            if (serialized.isEmpty()) {
                return UserCommand(-1, null)
            }

            val split = serialized.split(':')
            val id = try {
                split[0].toInt()
            } catch (e: NumberFormatException) {
                -1
            }
            return UserCommand(id, if (split.size > 1) split[1] else null)
        }
    }
}
